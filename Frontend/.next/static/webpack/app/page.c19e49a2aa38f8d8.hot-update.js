"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./src/api.tsx":
/*!*********************!*\
  !*** ./src/api.tsx ***!
  \*********************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   fetchCategories: function() { return /* binding */ fetchCategories; },\n/* harmony export */   fetchExpenses: function() { return /* binding */ fetchExpenses; },\n/* harmony export */   fetchGoal: function() { return /* binding */ fetchGoal; },\n/* harmony export */   fetchIncomes: function() { return /* binding */ fetchIncomes; },\n/* harmony export */   getCategoryDetail: function() { return /* binding */ getCategoryDetail; },\n/* harmony export */   getMonthlyTotals: function() { return /* binding */ getMonthlyTotals; },\n/* harmony export */   login: function() { return /* binding */ login; },\n/* harmony export */   register: function() { return /* binding */ register; },\n/* harmony export */   uploadCategory: function() { return /* binding */ uploadCategory; },\n/* harmony export */   uploadExpense: function() { return /* binding */ uploadExpense; },\n/* harmony export */   uploadGoal: function() { return /* binding */ uploadGoal; },\n/* harmony export */   uploadIncome: function() { return /* binding */ uploadIncome; }\n/* harmony export */ });\n// api.js\nconst BASE_URL = \"http://localhost:8000/\";\nconst login = async (credentials)=>{\n    try {\n        let data = {\n            \"username\": credentials.username,\n            \"password\": credentials.password\n        };\n        const response = await fetch(\"\".concat(BASE_URL, \"api/token/\"), {\n            mode: \"cors\",\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify({\n                \"username\": credentials.username,\n                \"password\": credentials.password\n            })\n        });\n        if (!response.ok) {\n            throw new Error(\"Login failed\");\n        }\n        return await response.json();\n    } catch (error) {\n        console.error(\"Error logging in:\", error);\n        throw error;\n    }\n};\nconst register = async (credentials)=>{\n    try {\n        const response = await fetch(\"\".concat(BASE_URL, \"lists/register_user\"), {\n            mode: \"cors\",\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify(credentials)\n        });\n        if (!response.ok) {\n            throw new Error(\"Registration failed\");\n        }\n        return await response.json();\n    } catch (error) {\n        console.error(\"Error registering user:\", error);\n        throw error;\n    }\n};\nconst uploadExpense = async (details)=>{\n    console.log(details);\n    try {\n        const response = await fetch(\"\".concat(BASE_URL, \"lists/expense/\"), {\n            mode: \"cors\",\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify(details.expense)\n        });\n        if (!response.ok) {\n            throw new Error(\"Upload failed\");\n        }\n        return await response.json();\n    } catch (error) {\n        console.error(\"Error uploading expense:\", error);\n        throw error;\n    }\n};\nconst uploadIncome = async (details)=>{\n    console.log(details.income);\n    try {\n        const response = await fetch(\"\".concat(BASE_URL, \"lists/income/\"), {\n            mode: \"cors\",\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify(details.income)\n        });\n        if (!response.ok) {\n            throw new Error(\"Upload failed\");\n        }\n        return await response.json();\n    } catch (error) {\n        console.error(\"Error uploading income:\", error);\n        throw error;\n    }\n};\nconst uploadGoal = async (details)=>{\n    try {\n        const response = await fetch(\"\".concat(BASE_URL, \"lists/goal/\"), {\n            mode: \"cors\",\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify(details)\n        });\n        if (!response.ok) {\n            throw new Error(\"Upload failed\");\n        }\n        return await response.json();\n    } catch (error) {\n        console.error(\"Error uploading goal:\", error);\n        throw error;\n    }\n};\nconst uploadCategory = async (category)=>{\n    //console.log(category.category)\n    try {\n        const response = await fetch(\"\".concat(BASE_URL, \"lists/category/\"), {\n            mode: \"cors\",\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify({\n                \"name\": category.category.name\n            })\n        });\n        if (!response.ok) {\n            throw new Error(\"Upload failed\");\n        }\n        return await response.json();\n    } catch (error) {\n        console.error(\"Error uploading income:\", error);\n        throw error;\n    }\n};\nconst fetchCategories = async ()=>{\n    let headers = {\n        \"Authorization\": \"Bearer \".concat(localStorage.getItem(\"token\"))\n    };\n    try {\n        const response = await fetch(\"\".concat(BASE_URL, \"lists/category/\"), {\n            headers: headers\n        });\n        if (!response.ok) {\n            throw new Error(\"Failed to fetch categories\");\n        }\n        return await response.json();\n    } catch (error) {\n        console.error(\"Error fetching categories:\", error);\n        throw error;\n    }\n};\nconst fetchExpenses = async ()=>{\n    let headers = {\n        \"Authorization\": \"Bearer \".concat(localStorage.getItem(\"token\"))\n    };\n    try {\n        const response = await fetch(\"\".concat(BASE_URL, \"lists/expense/\"), {\n            headers: headers\n        });\n        if (!response.ok) {\n            throw new Error(\"Failed to fetch expenses\");\n        }\n        return await response.json();\n    } catch (error) {\n        console.error(\"Error fetching expenses:\", error);\n        throw error;\n    }\n};\nconst fetchIncomes = async ()=>{\n    let headers = {\n        \"Authorization\": \"Bearer \".concat(localStorage.getItem(\"token\"))\n    };\n    try {\n        const response = await fetch(\"\".concat(BASE_URL, \"lists/income/\"), {\n            headers: headers\n        });\n        if (!response.ok) {\n            throw new Error(\"Failed to fetch incomes\");\n        }\n        return await response.json();\n    } catch (error) {\n        console.error(\"Error fetching income:\", error);\n        throw error;\n    }\n};\nconst fetchGoal = async ()=>{\n    let headers = {\n        \"Authorization\": \"Bearer \".concat(localStorage.getItem(\"token\"))\n    };\n    try {\n        const response = await fetch(\"\".concat(BASE_URL, \"lists/goal/\"), {\n            headers: headers\n        });\n        if (!response.ok) {\n            throw new Error(\"Failed to fetch goal\");\n        }\n        let goal = await response.json();\n        return goal[0];\n    } catch (error) {\n        console.error(\"Error fetching goal:\", error);\n        throw error;\n    }\n};\nconst getCategoryDetail = async (id)=>{\n    try {\n        const response = await fetch(\"\".concat(BASE_URL, \"lists/get_category/\").concat(id));\n        if (!response.ok) {\n            throw new Error(\"Failed to fetch category\");\n        }\n        return await response.json();\n    } catch (error) {\n        console.error(\"Error fetching categories:\", error);\n        throw error;\n    }\n};\nconst getMonthlyTotals = async ()=>{\n    try {\n        const response = await fetch(\"\".concat(BASE_URL, \"lists/get_monthly_totals\"));\n        if (!response.ok) {\n            throw new Error(\"Failed to fetch totals\");\n        }\n        return await response.json();\n    } catch (error) {\n        console.error(\"Error fetching totals:\", error);\n        throw error;\n    }\n}; // Define similar functions for other endpoints (goal, expense, income)\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/api.tsx\n"));

/***/ })

});